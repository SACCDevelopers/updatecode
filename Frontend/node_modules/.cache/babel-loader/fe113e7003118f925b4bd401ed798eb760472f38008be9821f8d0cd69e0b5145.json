{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sameer Shahzad\\\\Desktop\\\\quiz\\\\testing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [physicsData, setPhysicsData] = useState(null);\n  const [chemistryData, setChemistryData] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const physicsResponse = await axios.get('http://localhost:5000/api/results/physics');\n        const chemistryResponse = await axios.get('http://localhost:5000/api/results/chemistry');\n        setPhysicsData(physicsResponse.data);\n        setChemistryData(chemistryResponse.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (physicsData) {\n      const physicsPercentage = Math.round(physicsData.obtainedMarks / physicsData.totalMarks * 100);\n      const physicsChartData = {\n        labels: ['Physics'],\n        datasets: [{\n          label: 'Percentage',\n          data: [physicsPercentage],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)'],\n          borderWidth: 1\n        }]\n      };\n      const physicsResultsChart = new Chart(canvasRef1.current, {\n        type: 'bar',\n        data: physicsChartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: physicsData.totalMarks\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    }\n  }, [physicsData]);\n  useEffect(() => {\n    if (chemistryData) {\n      const chemistryPercentage = Math.round(chemistryData.obtainedMarks / chemistryData.totalMarks * 100);\n      const chemistryChartData = {\n        labels: ['Chemistry'],\n        datasets: [{\n          label: 'Percentage',\n          data: [chemistryPercentage],\n          backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n          borderColor: ['rgba(54, 162, 235, 1)'],\n          borderWidth: 1\n        }]\n      };\n      const chemistryResultsChart = new Chart(canvasRef2.current, {\n        type: 'bar',\n        data: chemistryChartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: chemistryData.totalMarks\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      });\n    }\n  }, [chemistryData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef1,\n      id: \"physicsPercentageChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef2,\n      id: \"chemistryPercentageChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ly0lRVPELMNFIaoYqb6RCfaSfS4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","Chart","jsxDEV","_jsxDEV","App","_s","canvasRef1","canvasRef2","physicsData","setPhysicsData","chemistryData","setChemistryData","fetchData","physicsResponse","get","chemistryResponse","data","error","console","log","physicsPercentage","Math","round","obtainedMarks","totalMarks","physicsChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","physicsResultsChart","current","type","options","scales","y","beginAtZero","max","plugins","legend","display","chemistryPercentage","chemistryChartData","chemistryResultsChart","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sameer Shahzad/Desktop/quiz/testing/src/App.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nfunction App() {\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [physicsData, setPhysicsData] = useState(null);\n  const [chemistryData, setChemistryData] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const physicsResponse = await axios.get('http://localhost:5000/api/results/physics');\n        const chemistryResponse = await axios.get('http://localhost:5000/api/results/chemistry');\n        setPhysicsData(physicsResponse.data);\n        setChemistryData(chemistryResponse.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (physicsData) {\n      const physicsPercentage = Math.round(\n        (physicsData.obtainedMarks / physicsData.totalMarks) * 100\n      );\n      const physicsChartData = {\n        labels: ['Physics'],\n        datasets: [\n          {\n            label: 'Percentage',\n            data: [physicsPercentage],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)'],\n            borderWidth: 1,\n          },\n        ],\n      };\n      const physicsResultsChart = new Chart(canvasRef1.current, {\n        type: 'bar',\n        data: physicsChartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: physicsData.totalMarks,\n            },\n          },\n          plugins: {\n            legend: {\n              display: false,\n            },\n          },\n        },\n      });\n    }\n  }, [physicsData]);\n\n  useEffect(() => {\n    if (chemistryData) {\n      const chemistryPercentage = Math.round(\n        (chemistryData.obtainedMarks / chemistryData.totalMarks) * 100\n      );\n      const chemistryChartData = {\n        labels: ['Chemistry'],\n        datasets: [\n          {\n            label: 'Percentage',\n            data: [chemistryPercentage],\n            backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n            borderColor: ['rgba(54, 162, 235, 1)'],\n            borderWidth: 1,\n          },\n        ],\n      };\n      const chemistryResultsChart = new Chart(canvasRef2.current, {\n        type: 'bar',\n        data: chemistryChartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: chemistryData.totalMarks,\n            },\n          },\n          plugins: {\n            legend: {\n              display: false,\n            },\n          },\n        },\n      });\n    }\n  }, [chemistryData]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef1} id=\"physicsPercentageChart\" />\n      <canvas ref={canvasRef2} id=\"chemistryPercentageChart\" />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}