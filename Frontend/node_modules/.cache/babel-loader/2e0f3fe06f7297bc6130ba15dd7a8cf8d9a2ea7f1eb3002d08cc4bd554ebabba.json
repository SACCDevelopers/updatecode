{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sameer Shahzad\\\\Desktop\\\\quiz\\\\testing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChemistryCharts = () => {\n  _s();\n  const doughnutRef = useRef(null);\n  const barRef = useRef(null);\n  const [doughnutChart, setDoughnutChart] = useState(null);\n  const [barChart, setBarChart] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch('http://localhost:5000/results/chemistry');\n        const data = await res.json();\n        const {\n          totalMarks,\n          obtainedMarks,\n          percentage\n        } = data;\n\n        // Create data for doughnut chart\n        const doughnutData = {\n          labels: ['Obtained Marks', 'Total Marks'],\n          datasets: [{\n            data: [obtainedMarks, totalMarks - obtainedMarks],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n\n        // Check if there's an existing doughnut chart instance and destroy it\n        if (doughnutChart) {\n          doughnutChart.destroy();\n        }\n\n        // Create a new doughnut chart instance\n        const newDoughnutChart = new Chart(doughnutRef.current, {\n          type: 'doughnut',\n          data: doughnutData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom'\n              }\n            }\n          }\n        });\n\n        // Set the doughnut chart instance state\n        setDoughnutChart(newDoughnutChart);\n\n        // Create data for bar chart\n        const barData = {\n          labels: ['Percentage'],\n          datasets: [{\n            label: 'Chemistry All Quizzes Average',\n            data: [percentage],\n            backgroundColor: '#36a2eb'\n          }]\n        };\n\n        // Check if there's an existing bar chart instance and destroy it\n        if (barChart) {\n          barChart.destroy();\n        }\n\n        // Create a new bar chart instance\n        const newBarChart = new Chart(barRef.current, {\n          type: 'bar',\n          data: barData,\n          options: {\n            scales: {\n              y: {\n                min: 0,\n                max: 100\n              }\n            }\n          }\n        });\n\n        // Set the bar chart instance state\n        setBarChart(newBarChart);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, [doughnutChart, barChart]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chemistry Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: doughnutRef,\n      width: \"10\",\n      height: \"10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: barRef,\n      width: \"100\",\n      height: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ChemistryCharts, \"tNpknd9+Xxss/nNlAPFA6DmjNeI=\");\n_c = ChemistryCharts;\nexport default ChemistryCharts;\nvar _c;\n$RefreshReg$(_c, \"ChemistryCharts\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","ChemistryCharts","_s","doughnutRef","barRef","doughnutChart","setDoughnutChart","barChart","setBarChart","fetchData","res","fetch","data","json","totalMarks","obtainedMarks","percentage","doughnutData","labels","datasets","backgroundColor","destroy","newDoughnutChart","current","type","options","plugins","legend","position","barData","label","newBarChart","scales","y","min","max","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Sameer Shahzad/Desktop/quiz/testing/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst ChemistryCharts = () => {\n  const doughnutRef = useRef(null);\n  const barRef = useRef(null);\n  const [doughnutChart, setDoughnutChart] = useState(null);\n  const [barChart, setBarChart] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch('http://localhost:5000/results/chemistry');\n        const data = await res.json();\n        const { totalMarks, obtainedMarks, percentage } = data;\n\n        // Create data for doughnut chart\n        const doughnutData = {\n          labels: ['Obtained Marks', 'Total Marks'],\n          datasets: [\n            {\n              data: [obtainedMarks, totalMarks - obtainedMarks],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n        // Check if there's an existing doughnut chart instance and destroy it\n        if (doughnutChart) {\n          doughnutChart.destroy();\n        }\n\n        // Create a new doughnut chart instance\n        const newDoughnutChart = new Chart(doughnutRef.current, {\n          type: 'doughnut',\n          data: doughnutData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n              },\n            },\n          },\n        });\n\n        // Set the doughnut chart instance state\n        setDoughnutChart(newDoughnutChart);\n\n        // Create data for bar chart\n        const barData = {\n          labels: ['Percentage'],\n          datasets: [\n            {\n              label: 'Chemistry All Quizzes Average',\n              data: [percentage],\n              backgroundColor: '#36a2eb',\n            },\n          ],\n        };\n\n        // Check if there's an existing bar chart instance and destroy it\n        if (barChart) {\n          barChart.destroy();\n        }\n\n        // Create a new bar chart instance\n        const newBarChart = new Chart(barRef.current, {\n          type: 'bar',\n          data: barData,\n          options: {\n            scales: {\n              y: {\n                min: 0,\n                max: 100,\n              },\n            },\n          },\n        });\n\n        // Set the bar chart instance state\n        setBarChart(newBarChart);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchData();\n  }, [doughnutChart, barChart]);\n\n  return (\n    <div>\n      <h2>Chemistry Results</h2>\n      <canvas ref={doughnutRef} width=\"10\" height=\"10\" />\n      <canvas ref={barRef} width=\"100\" height=\"100\" />\n    </div>\n  );\n};\n\nexport default ChemistryCharts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}