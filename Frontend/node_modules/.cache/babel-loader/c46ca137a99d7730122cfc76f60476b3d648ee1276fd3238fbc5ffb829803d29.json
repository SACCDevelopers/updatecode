{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sameer Shahzad\\\\Desktop\\\\quiz\\\\testing\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChemistryPieChart = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [percentage, setPercentage] = useState(0);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch('http://localhost:5000/results/chemistry');\n        const data = await res.json();\n        setPercentage(data.percentage);\n        const chartData = {\n          labels: ['Obtained Marks', 'Total Marks'],\n          datasets: [{\n            data: [data.obtainedMarks, data.totalMarks - data.obtainedMarks],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n\n        // Check if there's an existing Chart instance and destroy it\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n\n        // Create a new Chart instance\n        const newChartInstance = new Chart(canvasRef.current, {\n          type: 'doughnut',\n          data: chartData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom'\n              }\n            },\n            cutout: percentage === 0 ? '80%' : `${100 - percentage}%`,\n            animation: {\n              onComplete: () => setChartInstance(newChartInstance)\n            }\n          }\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chemistry All Quizzes Average\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"400\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"percentage-label\",\n        children: [percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(ChemistryPieChart, \"uI5VjtcsK8365QayndCKdhjVteo=\");\n_c = ChemistryPieChart;\nexport default ChemistryPieChart;\nvar _c;\n$RefreshReg$(_c, \"ChemistryPieChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","ChemistryPieChart","_s","canvasRef","chartInstance","setChartInstance","percentage","setPercentage","fetchData","res","fetch","data","json","chartData","labels","datasets","obtainedMarks","totalMarks","backgroundColor","destroy","newChartInstance","current","type","options","plugins","legend","position","cutout","animation","onComplete","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Sameer Shahzad/Desktop/quiz/testing/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\n\nconst ChemistryPieChart = () => {\n  const canvasRef = useRef(null);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [percentage, setPercentage] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch('http://localhost:5000/results/chemistry');\n        const data = await res.json();\n        setPercentage(data.percentage);\n        const chartData = {\n          labels: ['Obtained Marks', 'Total Marks'],\n          datasets: [\n            {\n              data: [data.obtainedMarks, data.totalMarks - data.obtainedMarks],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n        // Check if there's an existing Chart instance and destroy it\n        if (chartInstance) {\n          chartInstance.destroy();\n        }\n\n        // Create a new Chart instance\n        const newChartInstance = new Chart(canvasRef.current, {\n          type: 'doughnut',\n          data: chartData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n              },\n            },\n            cutout: percentage === 0 ? '80%' : `${100 - percentage}%`,\n            animation: {\n              onComplete: () => setChartInstance(newChartInstance),\n            },\n          },\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Chemistry All Quizzes Average</h2>\n      <div className=\"chart-container\">\n        <canvas ref={canvasRef} width=\"400\" height=\"400\" />\n        <div className=\"percentage-label\">{percentage}%</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChemistryPieChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}