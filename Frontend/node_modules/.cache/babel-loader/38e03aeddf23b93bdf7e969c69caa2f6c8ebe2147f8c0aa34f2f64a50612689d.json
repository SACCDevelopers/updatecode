{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './App.css';\nconst Results = () => {\n  _s();\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [chemistryResults, setChemistryResults] = useState(null);\n  const [physicsResults, setPhysicsResults] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [chemistryRes, physicsRes] = await Promise.all([fetch('http://localhost:5000/results/chemistry'), fetch('http://localhost:5000/results/physics')]);\n        const [chemistryData, physicsData] = await Promise.all([chemistryRes.json(), physicsRes.json()]);\n        setChemistryResults(chemistryData);\n        setPhysicsResults(physicsData);\n        const chemistryChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [{\n            data: [chemistryData.obtainedMarks],\n            backgroundColor: ['#36a2eb']\n          }]\n        };\n        const chemistryPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [{\n            data: [chemistryData.percentage, 100 - chemistryData.percentage],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n        const physicsChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [{\n            data: [physicsData.obtainedMarks],\n            backgroundColor: ['#36a2eb']\n          }]\n        };\n        const physicsPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [{\n            data: [physicsData.percentage, 100 - physicsData.percentage],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n        if (canvasRef1.current && canvasRef2.current) {\n          // Create doughnut chart for percentage of chemistry\n          const chemistryPercentageChart = new Chart(document.getElementById('percentageChart'), {\n            type: 'doughnut',\n            data: chemistryPercentageData,\n            options: {\n              plugins: {\n                legend: {\n                  position: 'bottom'\n                }\n              }\n            }\n          });\n\n          // Create bar chart for chemistry results\n          const chemistryResultsChart = new Chart(canvasRef1.current, {\n            type: 'bar',\n            data: chemistryChartData,\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true,\n                  max: chemistryData.totalMarks\n                }\n              },\n              plugins: {\n                legend: {\n                  display: false\n                }\n              }\n            }\n          });\n\n          // Create doughnut chart for percentage of physics\n          const physicsPercentageChart = new Chart(document.getElementById('physicsPercentageChart'), {\n            type: 'doughnut',\n            data: physicsPercentageData,\n            options: {\n              plugins: {\n                legend: {\n                  position: 'bottom'\n                }\n              }\n            }\n          });\n\n          // Create bar chart for physics results\n          const physicsResultsChart = new Chart(canvasRef2.current, {\n            type: 'bar',\n            data: physicsChartData,\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true,\n                  max: physicsData.totalMarks\n                }\n              },\n              plugins: {\n                legend: {\n                  display: false\n                }\n              }\n            }\n          });\n        }\n        return () => {\n          // Destroy charts on unmount\n          chemistryResultsChart.destroy();\n          chemistryPercentageChart.destroy();\n          physicsResultsChart.destroy();\n          physicsPercentageChart.destroy();\n        };\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, []);\n};\n_s(Results, \"103eyKHJczTUpSpBlXYo29Na6L4=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Results","_s","canvasRef1","canvasRef2","chemistryResults","setChemistryResults","physicsResults","setPhysicsResults","fetchData","chemistryRes","physicsRes","Promise","all","fetch","chemistryData","physicsData","json","chemistryChartData","labels","datasets","data","obtainedMarks","backgroundColor","chemistryPercentageData","percentage","physicsChartData","physicsPercentageData","current","chemistryPercentageChart","document","getElementById","type","options","plugins","legend","position","chemistryResultsChart","scales","y","beginAtZero","max","totalMarks","display","physicsPercentageChart","physicsResultsChart","destroy","err","console","error","_c","$RefreshReg$"],"sources":["C:/Users/Sameer Shahzad/Desktop/quiz/testing/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './App.css';\n\nconst Results = () => {\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [chemistryResults, setChemistryResults] = useState(null);\n  const [physicsResults, setPhysicsResults] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const [chemistryRes, physicsRes] = await Promise.all([\n          fetch('http://localhost:5000/results/chemistry'),\n          fetch('http://localhost:5000/results/physics')\n        ]);\n\n        const [chemistryData, physicsData] = await Promise.all([\n          chemistryRes.json(),\n          physicsRes.json()\n        ]);\n\n        setChemistryResults(chemistryData);\n        setPhysicsResults(physicsData);\n\n        const chemistryChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [\n            {\n              data: [chemistryData.obtainedMarks],\n              backgroundColor: ['#36a2eb'],\n            },\n          ],\n        };\n\n        const chemistryPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [\n            {\n              data: [chemistryData.percentage, 100 - chemistryData.percentage],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n        const physicsChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [\n            {\n              data: [physicsData.obtainedMarks],\n              backgroundColor: ['#36a2eb'],\n            },\n          ],\n        };\n\n        const physicsPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [\n            {\n              data: [physicsData.percentage, 100 - physicsData.percentage],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n        if(canvasRef1.current && canvasRef2.current) {\n          // Create doughnut chart for percentage of chemistry\n          const chemistryPercentageChart = new Chart(document.getElementById('percentageChart'), {\n            type: 'doughnut',\n            data: chemistryPercentageData,\n            options: {\n              plugins: {\n                legend: {\n                  position: 'bottom',\n                },\n              },\n            },\n          });\n\n          // Create bar chart for chemistry results\n          const chemistryResultsChart = new Chart(canvasRef1.current, {\n            type: 'bar',\n            data: chemistryChartData,\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true,\n                  max: chemistryData.totalMarks,\n                },\n              },\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n            },\n          });\n\n          // Create doughnut chart for percentage of physics\n          const physicsPercentageChart = new Chart(document.getElementById('physicsPercentageChart'), {\n            type: 'doughnut',\n            data: physicsPercentageData,\n            options: {\n              plugins: {\n                legend: {\n                  position: 'bottom',\n                },\n              },\n            },\n          });\n\n          // Create bar chart for physics results\n          const physicsResultsChart = new Chart(canvasRef2.current, {\n            type: 'bar',\n            data: physicsChartData,\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true,\n                  max: physicsData.totalMarks,\n                },\n              },\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n            },\n          });\n\n        }\n\n\n\n\n        return () => {\n          // Destroy charts on unmount\n          chemistryResultsChart.destroy();\n          chemistryPercentageChart.destroy();\n          physicsResultsChart.destroy();\n          physicsPercentageChart.destroy();\n        };\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchData();\n    \n  }, []);\n\n  \n};\n\nexport default Results;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}