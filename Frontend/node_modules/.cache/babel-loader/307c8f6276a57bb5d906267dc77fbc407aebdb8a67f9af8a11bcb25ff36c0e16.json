{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './App.css';\nconst Results = () => {\n  _s();\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [chemistryResults, setChemistryResults] = useState(null);\n  const [physicsResults, setPhysicsResults] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const chemistryRes = await fetch('http://localhost:5000/results/chemistry');\n        const chemistryData = await chemistryRes.json();\n        setChemistryResults(chemistryData);\n        const physicsRes = await fetch('http://localhost:5000/results/physics');\n        const physicsData = await physicsRes.json();\n        setPhysicsResults(physicsData);\n        const chemistryChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [{\n            data: [chemistryData.obtainedMarks],\n            backgroundColor: ['#36a2eb']\n          }]\n        };\n        const chemistryPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [{\n            data: [chemistryData.percentage, 100 - chemistryData.percentage],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n        const physicsChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [{\n            data: [physicsData.obtainedMarks],\n            backgroundColor: ['#36a2eb']\n          }]\n        };\n        const physicsPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [{\n            data: [physicsData.percentage, 100 - physicsData.percentage],\n            backgroundColor: ['#36a2eb', '#ebed36']\n          }]\n        };\n\n        // Create doughnut chart for percentage of chemistry\n        const chemistryPercentageChart = new Chart(document.getElementById('chemistryPercentageChart'), {\n          type: 'doughnut',\n          data: chemistryPercentageData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom'\n              }\n            }\n          }\n        });\n\n        // Create bar chart for chemistry results\n        const chemistryResultsChart = new Chart(canvasRef1.current, {\n          type: 'bar',\n          data: chemistryChartData,\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: chemistryData.totalMarks\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              }\n            }\n          }\n        });\n\n        // Create doughnut chart for percentage of physics\n        const physicsPercentageChart = new Chart(document.getElementById('physicsPercentageChart'), {\n          type: 'doughnut',\n          data: physicsPercentageData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom'\n              }\n            }\n          }\n        });\n\n        // Create bar chart for physics results\n        const physicsResultsChart = new Chart(canvasRef2.current, {\n          type: 'bar',\n          data: physicsChartData,\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: physicsData.totalMarks\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              }\n            }\n          }\n        });\n        return () => {\n          // Destroy charts on unmount\n          chemistryResultsChart.destroy();\n          chemistryPercentageChart.destroy();\n          physicsResultsChart.destroy();\n          physicsPercentageChart.destroy();\n        };\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, []);\n};\n_s(Results, \"103eyKHJczTUpSpBlXYo29Na6L4=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Results","_s","canvasRef1","canvasRef2","chemistryResults","setChemistryResults","physicsResults","setPhysicsResults","fetchData","chemistryRes","fetch","chemistryData","json","physicsRes","physicsData","chemistryChartData","labels","datasets","data","obtainedMarks","backgroundColor","chemistryPercentageData","percentage","physicsChartData","physicsPercentageData","chemistryPercentageChart","document","getElementById","type","options","plugins","legend","position","chemistryResultsChart","current","scales","y","beginAtZero","max","totalMarks","display","physicsPercentageChart","physicsResultsChart","destroy","err","console","error","_c","$RefreshReg$"],"sources":["C:/Users/Sameer Shahzad/Desktop/quiz/testing/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './App.css';\n\nconst Results = () => {\n  const canvasRef1 = useRef(null);\n  const canvasRef2 = useRef(null);\n  const [chemistryResults, setChemistryResults] = useState(null);\n  const [physicsResults, setPhysicsResults] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const chemistryRes = await fetch('http://localhost:5000/results/chemistry');\n        const chemistryData = await chemistryRes.json();\n        setChemistryResults(chemistryData);\n\n        const physicsRes = await fetch('http://localhost:5000/results/physics');\n        const physicsData = await physicsRes.json();\n        setPhysicsResults(physicsData);\n\n        const chemistryChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [\n            {\n              data: [chemistryData.obtainedMarks],\n              backgroundColor: ['#36a2eb'],\n            },\n          ],\n        };\n\n        const chemistryPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [\n            {\n              data: [chemistryData.percentage, 100 - chemistryData.percentage],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n\n\n        const physicsChartData = {\n          labels: ['Obtained Marks'],\n          datasets: [\n            {\n              data: [physicsData.obtainedMarks],\n              backgroundColor: ['#36a2eb'],\n            },\n          ],\n        };\n\n        const physicsPercentageData = {\n          labels: ['This much you are skillful', 'This much you are lacking'],\n          datasets: [\n            {\n              data: [physicsData.percentage, 100 - physicsData.percentage],\n              backgroundColor: ['#36a2eb', '#ebed36'],\n            },\n          ],\n        };\n\n\n\n\n        // Create doughnut chart for percentage of chemistry\n        const chemistryPercentageChart = new Chart(document.getElementById('chemistryPercentageChart'), {\n          type: 'doughnut',\n          data: chemistryPercentageData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n              },\n            },\n          },\n        });\n\n        // Create bar chart for chemistry results\n        const chemistryResultsChart = new Chart(canvasRef1.current, {\n          type: 'bar',\n          data: chemistryChartData,\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: chemistryData.totalMarks,\n              },\n            },\n            plugins: {\n              legend: {\n                display: false,\n              },\n            },\n          },\n        });\n        \n\n\n        // Create doughnut chart for percentage of physics\n        const physicsPercentageChart = new Chart(document.getElementById('physicsPercentageChart'), {\n          type: 'doughnut',\n          data: physicsPercentageData,\n          options: {\n            plugins: {\n              legend: {\n                position: 'bottom',\n              },\n            },\n          },\n        });\n\n        // Create bar chart for physics results\n        const physicsResultsChart = new Chart(canvasRef2.current, {\n          type: 'bar',\n          data: physicsChartData,\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: physicsData.totalMarks,\n              },\n            },\n            plugins: {\n              legend: {\n                display: false,\n              },\n            },\n          },\n        });\n\n\n\n\n\n\n        return () => {\n          // Destroy charts on unmount\n          chemistryResultsChart.destroy();\n          chemistryPercentageChart.destroy();\n          physicsResultsChart.destroy();\n          physicsPercentageChart.destroy();\n        };\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchData();\n    \n  }, []);\n\n  \n};\n\nexport default Results;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}